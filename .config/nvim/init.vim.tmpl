" Plugins

	if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
		silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
					\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
		autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
	endif

	call plug#begin('~/.local/share/nvim/plugged')

	Plug 'joshdick/onedark.vim'
	Plug 'rakr/vim-one'
	Plug 'editorconfig/editorconfig-vim'
	Plug 'sheerun/vim-polyglot'
	Plug 'tpope/vim-commentary'
	Plug 'tpope/vim-eunuch'
	Plug 'tpope/vim-fugitive'
	Plug 'tpope/vim-repeat'
	Plug 'tpope/vim-surround'
	Plug 'janko/vim-test'
	Plug 'kassio/neoterm'
	Plug 'airblade/vim-gitgutter'
	Plug 'neoclide/coc.nvim', {'branch': 'release'}
	Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
	Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }
	Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
	Plug 'Shougo/neomru.vim', { 'do': ':UpdateRemotePlugins' }
	Plug 'neoclide/denite-git', { 'do': ':UpdateRemotePlugins' }
	Plug 'neoclide/coc-denite', { 'do': ':UpdateRemotePlugins' }
	Plug 'akarl/autoformat.nvim'
	Plug 'sebdah/vim-delve'
	Plug 'ayu-theme/ayu-vim' " or other package manager

	call plug#end()

" Colors

	set termguicolors
	colorscheme one
	set background=dark

	highlight! link Folded LineNr
	highlight! link Whitespace LineNr
	highlight TabLineSel guibg=#${GREEN} guifg=#${BLACK}
	highlight StatusLine guibg=#${GREEN} guifg=#${BLACK}
	highlight StatusLineNC guifg=#${BACKGROUND} guibg=#${WHITE}
	highlight CursorLineNr guibg=#${GREEN} guifg=#${BACKGROUND}
	highlight VertSplit guifg=#${GREEN}

	highlight Search guifg=NONE guibg=NONE gui=bold,underline

" Autocommands
	" Automatically install dotfiles on save.
	autocmd! BufWritePost */dotfiles/*.tmpl silent exec "!./install.py" | source $MYVIMRC

	" Avoid having a non-relative pwd.
	autocmd! BufRead * cd .

" Keymaps
	let mapleader = ' '

	tnoremap <Esc> <C-\><C-n>

	nnoremap <C-l> :nohlsearch<CR>
	
	noremap <Leader>q :copen<CR>
	noremap ]q :cnext<CR>
	noremap [q :cprevious<CR>

	noremap ]c :GitGutterNextHunk<CR>
	noremap [c :GitGutterPrevHunk<CR>
	nnoremap <C-g> :GitGutterPreviewHunk<CR>

	" Window sizes.
	noremap <left> :vertical resize -10<CR>
	noremap <right> :vertical resize +10<CR>
	noremap <up> :resize +5<CR>
	noremap <down> :resize -5<CR>

	" Errors.

" Commands
	command! GolangCILint :call GolangCILint()
	command! GoToDefinition <Plug>(coc-type-definition)
	command! GoToToImplementation <Plug>(coc-implementation)
	command! GoToReferences <Plug>(coc-references)

" VIM options
	set clipboard=unnamedplus  " Use the system clipboard.
	set list " Show tabs and trailing spaces.
	set number " Enable linenumbers.
	set shiftwidth=4  " Indenting indents 4 spaces.
	set softtabstop=4  "A tab counts as 4 spaces.
	set tabstop=4  " A tab looks like 4 spaces.
	set laststatus=2  " Show a  status line even if only one window.
	set nobackup  " Don't use backup files.
	set noswapfile  " Don't use swapfiles.
	set shell=/bin/bash  " Use bash as the shell.
	set noequalalways  " Don't make splits equal the window sizes.
	set wildignore+=*.pyc,*.git/,tags,tags.sh,__pycache__/,node_modules/,dep/
	set exrc
	set grepprg=rg\ --vimgrep
	set inccommand=nosplit  " Preview replacements in buffer.
	set ignorecase
	set smartcase  " If search contains a capital letter make the search case sensitive.
	set wildmode=longest,full  " Nice autocomplete menu for commandline.
	set fillchars=stl:_,stlnc:_,vert:\|,fold:Â·,diff:-
	set hidden
	set foldenable
	set foldmethod=indent  " Fold on indent.
	set cursorline
	set nowrap
	set linebreak
	set breakindent
	set sidescroll=1
	set sidescrolloff=5
	set listchars+=precedes:<,extends:>

" Plugin options
	" Disable most things regarding autocomplete and formatting. We want to
	" use coc for that instead.
	let g:go_def_mapping_enabled = 0
	let g:go_fmt_autosave = 0
	let g:go_asmfmt_autosave = 0
	let g:go_def_mapping_enabled = 0
	let g:go_code_completion_enabled = 0
	let g:go_gopls_enabled = 0
	let g:go_template_autocreate = 0

	" Some stuff we do want enabled.
	let g:go_mod_fmt_autosave = 1
	let g:go_highlight_functions = 1
	let g:go_highlight_function_calls = 1
	let g:go_highlight_types = 1
	let g:go_highlight_fields = 1

	let g:neoterm_keep_term_open = 1
	let g:neoterm_autoscroll = 1
	let g:neoterm_default_mod = ':botright split'
	let g:neoterm_autoinsert = 0

	let test#strategy = "neoterm"
	let test#preserve_screen = 0
	let test#go#test#options = '-race'
	let test#vim#term_position = "botright"

" Denite
	" Keymaps
	nnoremap <Leader>f :silent Denite buffer file_mru file/rec<CR>
	nnoremap - :Defx `expand('%:p:h')` -search=`expand('%:p')` <CR>
	nnoremap <Leader>] :silent Denite outline tag -unique<CR>
	nnoremap <Leader>* :silent DeniteCursorWord line<CR>
	nnoremap <Leader>/ :silent Denite grep:::! -start-filter<CR>
	nnoremap <Leader>g :silent Denite menu:git gitstatus<CR>

	" Config
	call denite#custom#option('_', {
				\ 'split': 'floating',
				\ 'auto_resize': 1,
				\ })

	call denite#custom#var('file/rec', 'command',
				\ ['rg', '--files', '--glob', '!.git', '--color', 'never'])

	call denite#custom#var('grep', {
				\ 'command': ['rg'],
				\ 'default_opts': ['-i', '--vimgrep', '--no-heading'],
				\ 'recursive_opts': [],
				\ 'pattern_opt': ['--regexp'],
				\ 'separator': ['--'],
				\ 'final_opts': [],
				\ })

	call denite#custom#source(
				\ 'file_mru', 'matchers', ['matcher/fuzzy', 'matcher/project_files'])
	call denite#custom#var(
				\ 'file_mru', 'fnamemodify', ':~:.')

	" Custom menus
	call denite#custom#var('menu', 'menus', {
				\ 'git': {
					\ 'description': 'Git',
					\ 'command_candidates': [
						\ ['Status', 'Gstatus'],
						\ ['Diff current file', 'Gdiffsplit'],
						\ ['Undo hunk', 'GitGutterUndoHunk'],
						\ ['Stage hunk', 'GitGutterStageHunk'],
						\ ['Preview hunk', 'GitGutterPreviewHunk'],
					\ ],
				\ },
				\ })

	autocmd! FileType denite call s:denite_buffer_config()
	function! s:denite_buffer_config() abort
		nnoremap <silent><buffer><expr> <CR>
					\ denite#do_map('do_action')
		nnoremap <silent><buffer><expr> d
					\ denite#do_map('do_action', 'delete')
		nnoremap <silent><buffer><expr> p
					\ denite#do_map('do_action', 'preview')
		nnoremap <silent><buffer><expr> q
					\ denite#do_map('quit')
		nnoremap <silent><buffer><expr> i
					\ denite#do_map('open_filter_buffer')
	endfunction

" Defx
	call defx#custom#option('_', {
				\ 'split': 'floating',
				\ })

	autocmd FileType defx call s:defx_buffer_config()
	function! s:defx_buffer_config() abort
		setlocal cursorline
		nnoremap <silent><buffer><expr> <CR>
					\ defx#is_directory() ?
					\ defx#do_action('open_tree', 'toggle') :
					\ defx#do_action('multi', ['drop', 'quit'])
		nnoremap <silent><buffer><expr> nd
					\ defx#do_action('new_directory')
		nnoremap <silent><buffer><expr> nf
					\ defx#do_action('new_file')
		nnoremap <silent><buffer><expr> d
					\ defx#do_action('remove')
		nnoremap <silent><buffer><expr> r
					\ defx#do_action('rename')
		nnoremap <silent><buffer><expr> -
					\ defx#do_action('cd', ['..'])
		nnoremap <silent><buffer><expr> q
					\ defx#do_action('quit')
	endfunction

" Coc
	" Use denite for jump locations.
	let g:coc_enable_locationlist = 0
	autocmd! User CocLocationsChange Denite coc-jump-locations

	" C-q shows docs or signature help depending on normal or insert -mode.
	nmap <silent> <C-q> :call CocActionAsync('doHover')<CR>
	imap <silent> <C-q> <C-o>:call CocActionAsync('showSignatureHelp')<CR>

	" Show and jump to erors.
	noremap <leader>e :CocList diagnostics<CR>
	nmap ]e <Plug>(coc-diagnostic-next-error)
	nmap [e <Plug>(coc-diagnostic-prev-error)

	" Rename.
	noremap <leader>r :call CocAction("rename")<CR>

	" Use enter to confirm first selection on completion.
	inoremap <silent><expr> <c-space> coc#refresh()
	inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

	" Go to definition, implementation or tag.
	nmap <silent> <C-]> :silent! call <SID>goto_definition()<CR>
	nmap <silent> <C-[> <Plug>(coc-implementation)

	function! s:goto_definition() abort
		if CocAction('jumpDefinition')
			return v:true
		endif

		execute("normal! \<C-]>")
	endfunction

" Vim-test
	noremap <Leader>tn :TestNearest<CR>
	noremap <Leader>tl :TestLast<CR>

" Vim-delve
	command! DebugTest :call s:test_debug()
	noremap <Leader>bb :DlvToggleBreakpoint<CR>

	function! s:test_debug()
		let g:delve_new_command = 'enew'
		let l:args = []

		if exists('g:test#last_position')
			let l:args = test#go#delve#build_position('nearest', g:test#last_position)
		else
			let l:args = test#go#delve#build_position('nearest', {'file': expand("%"), 'col': col('.'), 'line': line('.') })
		endif

		echomsg printf("%s", l:args)

		tabe expand('%')
		call delve#dlvTest(l:args[0], printf('-- %s', l:args[2]))
	endfunction


" Autoformat.nvim
	call autoformat#config('go', ['goimports -local "$(go list -m)"', 'gofumpt -s -extra']) 
	call autoformat#config('python', ['black -']) 

	autocmd! BufWritePre * :Autoformat

" Tags
	autocmd! BufWritePost * exec 'silent ![ -f "tags" ] && ctargs -R'

" Golang Linting
	" GolangCILint lints the project from the current directory and puts the
	" result inside the quickfix list.
	function! GolangCILint()
		cexpr []

		" Run only the typecheck first.
		let l:errors = system("golangci-lint run --no-config --disable-all -E typecheck --out-format line-number --print-issued-lines=false")

		if l:errors == ""
			let l:errors = system("golangci-lint run --out-format line-number --print-issued-lines=false")
		endif

		if l:errors == ""
			echo "GolangCILint: OK!"
		else
			cexpr l:errors
			copen
		endif
	endfunction
" vim: ft=vim
